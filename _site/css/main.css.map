{
	"version": 3,
	"file": "main.css",
	"sources": [
		"main.scss",
		"_scss/_reset.scss",
		"_scss/_mq.scss",
		"_scss/_colors.scss",
		"_scss/_shared.scss",
		"_scss/_layout.scss"
	],
	"sourcesContent": [
		"// Import partials from `sass_dir` (defaults to `_sass`)\n@import\n        \"reset\",\n        \"mq\",\n        \"colors\",\n        \"shared\",\n        \"layout\"\n;\n",
		"body {\n  margin: 0;\n  padding: 0;\n}\n",
		"@charset \"UTF-8\";\n\n// To enable support for browsers that do not support @media queries,\n// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false\n// Create a separate stylesheet served exclusively to these browsers,\n// meaning @media queries will be rasterized, relying on the cascade itself\n$mq-responsive: true !default;\n\n// Name your breakpoints in a way that creates a ubiquitous language\n// across team members. It will improve communication between\n// stakeholders, designers, developers, and testers.\n$mq-breakpoints: (\n    mobile:  576px,\n    tablet:  768px,\n    desktop: 1200px,\n    wide:    1800px\n) !default;\n\n// Define the breakpoint from the $mq-breakpoints list that should\n// be used as the target width when outputting a static stylesheet\n// (i.e. when $mq-responsive is set to 'false').\n$mq-static-breakpoint: desktop !default;\n\n// If you want to display the currently active breakpoint in the top\n// right corner of your site during development, add the breakpoints\n// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n$mq-show-breakpoints: () !default;\n\n@function mq-px2em($px, $base-font-size: 16px) {\n    @if (unitless($px)) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels for you\";\n        @return mq-px2em($px + 0px); // That may fail.\n    } @else if (unit($px) == em) {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n@function mq-get-breakpoint-width($name) {\n    @if(map-has-key($mq-breakpoints, $name)) {\n        @return map-get($mq-breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} does not exist\";\n    }\n}\n\n// Media Query mixin\n// Usage:\n// .element {\n//     @include mq($from: mobile) {\n//         color: red;\n//     }\n//     @include mq($until: tablet) {\n//         color: blue;\n//     }\n//     @include mq(mobile, tablet) {\n//         color: green;\n//     }\n//     @include mq($from: tablet, $and: '(orientation: landscape)') {\n//         color: teal;\n//     }\n//     @include mq(950px) {\n//         color: hotpink;\n//     }\n// }\n\n@mixin mq($from: false, $until: false, $and: false, $to: null) {\n\n    // Deprecate use of $to for $until, because $until implies the exclusive\n    // boundary that is in place, whereas $to is unclear.\n    @if $to {\n        @if not $until {\n            @warn '$to is deprecated, you should use $until instead';\n            $until: $to;\n        } @else {\n            @warn 'You are using $until and $to together. $to is deprecated and has been ignored. You should remove it.';\n        }\n    }\n\n\n    // Initialize variables\n    $min-width: 0;\n    $max-width: 0;\n    $mediaQuery: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if ($mq-responsive == false) {\n        $static-breakpoint-width: mq-get-breakpoint-width($mq-static-breakpoint);\n        @if type-of($static-breakpoint-width) == number {\n            $target-width: mq-px2em($static-breakpoint-width);\n            // Output only rules that start at or span our target width\n            @if ($and == false and ($min-width <= $target-width) and (($until == false) or ($max-width >= $target-width))) {\n                @content;\n            }\n        } @else {\n            // Throw a warning if $mq-static-breakpoint is not in the $mq-breakpoints list\n            @warn \"No static styles will be output: #{$static-breakpoint-width}\";\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $mediaQuery: '#{$mediaQuery} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $mediaQuery: '#{$mediaQuery} and (max-width: #{$max-width})'; }\n        @if $and            { $mediaQuery: '#{$mediaQuery} and #{$and}'; }\n\n        $mediaQuery: unquote(#{$mediaQuery});\n\n        @media #{all+$mediaQuery} {\n            @content;\n        }\n    }\n}\n\n// Add a breakpoint\n// Usage: $mq-breakpoints: mq-add-breakpoint(tvscreen, 1920px);\n@function mq-add-breakpoint($name, $breakpoint) {\n    $new-breakpoint: ($name: $breakpoint);\n    @return map-merge($mq-breakpoints, $new-breakpoint);\n}\n\n// Show the active breakpoint in the top right corner of the viewport\n@if (length($mq-show-breakpoints) > 0) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $mq-show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint);\n            @include mq($show-breakpoint) {\n                content: \"#{$show-breakpoint} â‰¥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n",
		"$greyXlight: #F7F7F7;\n$greylight: #DADCE0;\n$greyXdark: #191A1E;\n",
		"",
		"$spacer: 8px;\n\nheader {\n  border-bottom: 1px solid $greyXdark;\n  padding: $spacer 0;\n}\n\n.flex {\n  display: flex;\n  height: 500px;\n  background-color: pink;\n  flex-direction: column;\n\n  @include mq($from: desktop) {\n    flex-direction: row;\n  }\n}\n\n.flex__leftCol {\n  width: 100%;\n  //delete this\n  height: 500px;\n  background-color: blue;\n  //\n\n  @include mq($from: desktop) {\n    width: 240px;\n  }\n}\n\n.flex__mainCol {\n  width: 100%;\n  //delete this\n  height: 500px;\n  background-color: pink;\n  //\n  @include mq($from: desktop) {\n    width: calc(60% - 120px);\n  }\n}\n\n.flex__rightCol {\n  width: 100%;\n  //delete this\n  height: 500px;\n  background-color: green;\n  //\n  @include mq($from: desktop) {\n    width: calc(40% - 120px);\n  }\n}\n"
	],
	"names": [],
	"mappings": "ACAA,AAAA,IAAI,CAAC,EACH,MAAM,EAAE,CAAC,EACT,OAAO,EAAE,CAAC,GACX;;AIDD,AAAA,MAAM,CAAC,EACL,aAAa,EAAE,GAAG,CAAC,KAAK,CFDd,OAAO,EEEjB,OAAO,EAJA,GAAG,CAIO,CAAC,GACnB;;AAED,AAAA,KAAK,CAAC,EACJ,OAAO,EAAE,IAAI,EACb,MAAM,EAAE,KAAK,EACb,gBAAgB,EAAE,IAAI,EACtB,cAAc,EAAE,MAAM,GAKvB;;AH+GO,MAAM,0BGxHd,GAAA,AAAA,KAAK,CAAC,EAOF,cAAc,EAAE,GAAG,GAEtB,EAAA;;AAED,AAAA,cAAc,CAAC,EACb,KAAK,EAAE,IAAI,EAEX,MAAM,EAAE,KAAK,EACb,gBAAgB,EAAE,IAAI,GAMvB;;AHmGO,MAAM,0BG7Gd,GAAA,AAAA,cAAc,CAAC,EAQX,KAAK,EAAE,KAAK,GAEf,EAAA;;AAED,AAAA,cAAc,CAAC,EACb,KAAK,EAAE,IAAI,EAEX,MAAM,EAAE,KAAK,EACb,gBAAgB,EAAE,IAAI,GAKvB;;AHwFO,MAAM,0BGjGd,GAAA,AAAA,cAAc,CAAC,EAOX,KAAK,EAAE,iBAAiB,GAE3B,EAAA;;AAED,AAAA,eAAe,CAAC,EACd,KAAK,EAAE,IAAI,EAEX,MAAM,EAAE,KAAK,EACb,gBAAgB,EAAE,KAAK,GAKxB;;AH6EO,MAAM,0BGtFd,GAAA,AAAA,eAAe,CAAC,EAOZ,KAAK,EAAE,iBAAiB,GAE3B,EAAA"
}